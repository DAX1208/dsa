#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node* next;
    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class Queue {
    Node* front;
    Node* rear;

public:
    Queue() {
        front = rear = nullptr;
    }

    void enqueue(int x) {
        Node* temp = new Node(x);
        if (rear == nullptr) {   // queue empty
            front = rear = temp;
            return;
        }
        rear->next = temp;
        rear = temp;
    }

    int dequeue() {
        if (isEmpty()) return -1;
        int val = front->data;
        Node* temp = front;
        front = front->next;
        if (front == nullptr) rear = nullptr; // queue became empty
        delete temp;
        return val;
    }

    int peek() {
        if (isEmpty()) return -1;
        return front->data;
    }

    int isEmpty() {
        return (front == nullptr) ? 1 : 0;
    }
};

int main() {
    int n;
    cin >> n;
    Queue q;

    for (int i = 0; i < n; i++) {
        int type;
        cin >> type;

        if (type == 1) {
            int x;
            cin >> x;
            q.enqueue(x);
        } 
        else if (type == 2) {
            cout << q.dequeue() << endl;
        } 
        else if (type == 3) {
            cout << q.peek() << endl;
        } 
        else if (type == 4) {
            cout << q.isEmpty() << endl;
        }
    }
    return 0;
}
